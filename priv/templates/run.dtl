#!/bin/sh

OPTS=$*

REL_VSN="{{relvsn}}"
REL_NAME="{{relname}}"
ERTS_VSN="{{ertsvsn}}"
RUNNER_SCRIPT_DIR=$(cd ${0%/*} && pwd)
ROOT_DIR=$(dirname $RUNNER_SCRIPT_DIR)
NAME=`basename $0`

PIDFILE=$RUNNER_SCRIPT_DIR"/."$NAME".pid"
BINDIR=$ROOT_DIR/erts-$ERTS_VSN/bin
REL_DIR=$ROOT_DIR/releases/$REL_VSN
LIBDIR=$ROOT_DIR/lib
SYS_CONFIG=$REL_DIR/sys.config
VM_ARGS=$REL_DIR/vm.args
REL_FILE=$REL_DIR/$REL_NAME.rel

STARTED=false
PID=""
if [ -f $PIDFILE ] ; then 
  STARTED=true
  PID=`cat $PIDFILE | head -1`
fi
NOSHELL="-noshell -detached"
DAEMON=true
ACTION=""

help() {
  MESSAGE=$1
  if [ "x$MESSAGE" != "x" ] ; then
    echo $MESSAGE
  fi
  echo "Usage : $NAME [options] {start|stop|console|status}" 
  echo ""
  echo "Options :"
  echo "  -C --compile     : Compile code before run"
  echo "  -K --clean       : Clean and compile code before run"
  echo "  -h --help        : Display this message"
  echo "     --dev         : Start in dev mode"
}

print_status() {
  case $STARTED in
    true)
      echo "$NAME is running (PID $PID)" ;;
    *)
      echo "$NAME is not running" ;;
  esac
}

start_app() {
  if [ $STARTED = true ] ; then
     echo "$NAME is already running (PID $PID)"
   else
     EXTRA_ARGS=""
     if [ -f $VM_ARGS ] ; then
       EXTRA=$(cat $VM_ARGS | grep -v "^\s*#" | sed -e 's/#.*//' | xargs)
       EXTRA_ARGS=$(eval echo $EXTRA)
     fi
     LIBS=$($BINDIR/escript $REL_DIR/boot.erl $REL_FILE $LIBDIR)
     $BINDIR/erl $EXTRA_ARGS -pa $LIBS $NOSHELL -config $SYS_CONFIG -s $REL_NAME start 
   fi
}

get_pid() {
  if [ $DAEMON = true ] ; then
    PID=`ps aux | grep -v grep | grep $NAME | grep beam | awk '{print $2}'`
    echo $PID > $PIDFILE
  fi
}

stop_app() {
  if [ $STARTED = true ] ; then
    kill -9 $PID 2>/dev/null
    rm -f $PIDFILE
  else
    echo "$NAME is not started"
  fi
}

while [ $# -ne 0 ] ; do
  case $1 in
    console) 
      NOSHELL="" ; DAEMON=false ; ACTION="console" ;;
    start)
      ACTION="start" ;;
    stop)
      ACTION="stop" ;;
    status)
      ACTION="status" ;;
    -h|--help)
      help ; exit 0 ;;
    *)
      help "Invalid option $1" ; exit 1 ;;  
  esac
  shift
done

case $ACTION in
  stop)
    stop_app ;;
  start)
    start_app ; get_pid ;;
  console)
    start_app ;;
  status)
    print_status ;;
  *)
    help ;;
esac

