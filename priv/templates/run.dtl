#!/bin/sh

OPTS=$*

REL_VSN="{{relvsn}}"
REL_NAME="{{relname}}"
ERTS_VSN="{{ertsvsn}}"

SCRIPT_DIR="$(cd ${0%/*} && pwd)"
ROOT_DIR="$(dirname $SCRIPT_DIR)"
NAME="$(basename $0)"

REL_DIR="$ROOT_DIR/releases/$REL_VSN"
LIBDIR="$ROOT_DIR/lib"

PIDFILE="$SCRIPT_DIR/.$NAME.pid"
PIPE_DIR="$SCRIPT_DIR/.erlang.$NAME.pipe"
LOG_DIR="$ROOT_DIR/log"
SYS_CONFIG="$REL_DIR/sys.config"
VM_ARGS="$REL_DIR/vm.args"
REL_FILE="$REL_DIR/$REL_NAME-$REL_VSN.rel"
BOOT_FILE="$REL_DIR/$REL_NAME-$REL_VSN"
DEPS_FILE="$REL_DIR/$REL_NAME-$REL_VSN.deps"

ERTS_DIR="$ROOT_DIR/erts-$ERTS_VSN"
if [ -d "$ERTS_DIR" ] ; then
  export BINDIR="$ERTS_DIR/bin"
else
  _ERL="$(which erl)"
  _CODE="io:format(\"~s\", [code:root_dir()]), halt()."
  _ERL_ROOT="$("$_ERL" -noshell -eval "$_CODE")"
  ERTS_DIR="$_ERL_ROOT/erts-$ERTS_VSN"
  export BINDIR="$ERTS_DIR/bin"
fi

STARTED=false
PID=""
if [ -f $PIDFILE ] ; then 
  STARTED=true
  PID=`cat $PIDFILE | head -1`
fi

help() {
  MESSAGE=$1
  if [ "x$MESSAGE" != "x" ] ; then
    echo $MESSAGE
  fi
  echo "Usage : $NAME [options] {start|attach|stop|console|status}" 
  echo ""
  echo "Options :"
  echo "  -h --help        : Display this message"
}

print_status() {
  case $STARTED in
    true)
      echo "$NAME is running (PID $PID)" ;;
    *)
      echo "$NAME is not running" ;;
  esac
}

run_app() {
  if [ $STARTED = true ] ; then
     echo "$NAME is already running (PID $PID)"
   else
     EXTRA_ARGS=""
     if [ -f $VM_ARGS ] ; then
       EXTRA=$(cat $VM_ARGS | grep -v "^\s*#" | sed -e 's/#.*//' | xargs)
       EXTRA_ARGS=$(eval echo $EXTRA)
     fi
     LIBS=$($BINDIR/escript $REL_DIR/extrel get_libs $DEPS_FILE $LIBDIR)
     export ERL_LIBS=$($BINDIR/escript $REL_DIR/extrel get_erl_libs $DEPS_FILE $LIBDIR)
     export ROOTDIR="$ROOT_DIR"
     export EMU="beam"
     export PROGNAME="erlexec"
     export LD_LIBRARY_PATH="$ERTS_DIR/lib:$LD_LIBRARY_PATH"
     $BINDIR/$PROGNAME $EXTRA_ARGS -pa $LIBS -config $SYS_CONFIG -boot $BOOT_FILE
   fi
}

start_app() {
  mkdir -p $PIPE_DIR
  mkdir -p $LOG_DIR
  $BINDIR/run_erl -daemon $PIPE_DIR $LOG_DIR "exec $SCRIPT_DIR/$NAME console"
  get_pid
}

attach_app() {
  if [ $STARTED = true ] ; then
    exec $BINDIR/to_erl $PIPE_DIR
  else
    echo "$NAME is not started"
  fi
}

get_pid() {
  sleep 1
  PID=`ps aux | grep -v grep | grep $NAME | grep beam | awk '{print $2}'`
  echo $PID > $PIDFILE
}

stop_app() {
  if [ $STARTED = true ] ; then
    kill -9 $PID 2>/dev/null
    rm -f $PIDFILE
  else
    echo "$NAME is not started"
  fi
}

execute() {
  MODULE=$1 ; shift
  FUNCTION=$1 ; shift
  ARGS="["
  SEP=""
  for arg in $@ ; do
    ARGS=$(echo "$ARGS$SEP\"$arg\"")
    SEP=", "
  done
  ARGS=$(echo "$ARGS]")
  NODE_NAME=$(cat $VM_ARGS | grep -E -w '\-sname|\-name' | grep -E -v '^\s*#' | sed -e 's/#.*//' | sed 's/\(-sname\|-name\) *\([^ \t]*\)[ \t]*/\2/')
  if [ $STARTED = true ] ; then
    $BINDIR/erl -pa $ROOT_DIR/lib/*/ebin \
      -noshell \
      -sname $(echo $NODE_NAME"_seed") \
      -eval "[_, Host] = string:tokens(atom_to_list(node()), \"@\"), 
             Node = list_to_atom(\"$NODE_NAME@\" ++ Host), 
             case rpc:call(Node, $MODULE, $FUNCTION, [$ARGS]) of
               ok -> ok;
               E -> io:format(\"~p\", [E])
             end" \
      -s init stop
  else
    echo "$NAME is not started"
  fi
}

while [ $# -ne 0 ] ; do
  case $1 in
    console) 
      run_app ;;
    start)
      start_app ;;
    attach)
      attach_app ;;
    stop)
      stop_app ;;
    restart)
      stop_app ; sleep 2 ; start_app ;;
    status)
      print_status ;;
    exec)
      shift ; execute $@ ; exit 0 ;;
    -h|--help)
      help ; exit 0 ;;
    *)
      help "Invalid option $1" ; exit 1 ;;  
  esac
  shift
done

