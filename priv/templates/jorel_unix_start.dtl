#!/bin/sh

OPTS=$*

REL_VSN="{{relvsn}}"
REL_NAME="{{relname}}"
ERTS_VSN="{{ertsvsn}}"
{% for source in sources %}
[ -f {{source}} ] && . {{source}}
{% empty %}{% endfor %}
SCRIPT=$0
SCRIPT_DIR="$(cd ${0%/*} && pwd)"
ROOT_DIR="$(dirname $SCRIPT_DIR)"
NAME="$(basename $0)"

REL_DIR="$ROOT_DIR/releases/$REL_VSN"
LIBDIR="$ROOT_DIR/lib"

PIPE_DIR="$SCRIPT_DIR/.erlang.$NAME.pipe"
LOG_DIR="$ROOT_DIR/log"
SYS_CONFIG="$REL_DIR/sys.config"
COMPILED_SYS_CONFIG="${ROOT_DIR}/bin/${REL_NAME}.config"
VM_ARGS="$REL_DIR/vm.args"
REL_FILE="$REL_DIR/$REL_NAME-$REL_VSN.rel"
BOOT_FILE="$REL_DIR/$REL_NAME-$REL_VSN"
CLEAN_BOOT_FILE="$REL_DIR/start_clean"

ERTS_DIR="$ROOT_DIR/erts-$ERTS_VSN"
if [ -d "$ERTS_DIR" ] ; then
  export BINDIR="$ERTS_DIR/bin"
else
  _ERL="$(which erl)"
  _CODE="io:format(\"~s\", [code:root_dir()]), halt()."
  _ERL_ROOT="$("$_ERL" -noshell -eval "$_CODE")"
  ERTS_DIR="$_ERL_ROOT/erts-$ERTS_VSN"
  export BINDIR="$ERTS_DIR/bin"
fi

# Extract the target node name from node.args
NODE_NAME_ARG=$(egrep '^-s?name' "$VM_ARGS")
if [ -z "$NODE_NAME_ARG" ]; then
  echo "vm.args needs to have either -name or -sname parameter."
  exit 1
fi

# Extract the name type and name from the NODE_NAME_ARG for REMSH
NODE_NAME_TYPE="$(echo "$NODE_NAME_ARG" | awk '{print $1}')"
NODE_NAME="$(echo "$NODE_NAME_ARG" | awk '{print $2}')"

# Extract the target cookie
NODE_COOKIE_ARG="$(grep '^-setcookie' "$VM_ARGS")"
if [ -z "$NODE_COOKIE_ARG" ]; then
  echo "vm.args needs to have a -setcookie parameter."
  exit 1
fi

# Extract cookie name from NODE_COOKIE_ARG
NODE_COOKIE="$(echo "$NODE_COOKIE_ARG" | awk '{print $2}')"

# All deps ebin path
APP_DEPS=$($BINDIR/escript $REL_DIR/extrel get_libs $REL_FILE $LIBDIR)

jorel_debug() {
  if [ "$DEBUG" = "1" ] ; then
    PURPLE='\033[0;35m'
    NC='\033[0m'
    printf "${PURPLE}$1${NC}\n"
  fi
}

jorel_nodetool() {
  command="$1"; shift

  "$BINDIR/escript" "$ROOT_DIR/bin/nodetool" "$NODE_NAME_TYPE" "$NODE_NAME" \
    -setcookie "$NODE_COOKIE" "$command" $@
}

get_pid() {
  if output="$(jorel_nodetool rpcterms os getpid)"
  then
    echo "$output" | sed -e 's/"//g'
    return 0
  else
    echo "$output"
    return 1
  fi
}

if ! jorel_nodetool "ping" > /dev/null ; then
  STARTED=false
  PID=""
else
  STARTED=true
  PID=$(get_pid)
fi

print_status() {
  if ! jorel_nodetool "ping" > /dev/null ; then
    echo "$NAME is not running"
  else
    echo "$NAME is running (PID $PID)"
  fi
}

print_info() {
  echo "vm.args        : $VM_ARGS"
  echo "sys.config     : $SYS_CONFIG"
  echo "node name type : $NODE_NAME_TYPE"
  echo "node name      : $NODE_NAME"
  echo "node cookie    : $NODE_COOKIE"
  if [ $STARTED = true ] ; then
    echo "PID            : $PID"
    echo "Version        : $(jorel_nodetool version)"
  fi
}

compile_config() {
  rm -f "$COMPILED_SYS_CONFIG"
  "$BINDIR/escript" "$ROOT_DIR/bin/config.escript" "$SYS_CONFIG" "$COMPILED_SYS_CONFIG" $APP_DEPS
  if [ "$?" = "1" ] ; then
    echo "Invalid configuration!"
    exit 1
  fi
}

run_app() {
  if [ $STARTED = true ] ; then
    echo "$NAME is already running (PID $PID)"
  else
    compile_config
    EXTRA_ARGS=""
    if [ -f $VM_ARGS ] ; then
      EXTRA=$(cat $VM_ARGS | grep -v "^\s*#" | sed -e 's/#.*//' | xargs)
      EXTRA_ARGS=$(eval echo $EXTRA)
    fi
    export ERL_LIBS=$($BINDIR/escript $REL_DIR/extrel get_erl_libs $REL_FILE $LIBDIR)
    export ROOTDIR="$ROOT_DIR"
    export EMU="beam"
    export PROGNAME="erlexec"
    export LD_LIBRARY_PATH="$ERTS_DIR/lib:$LD_LIBRARY_PATH"
    jorel_debug "Start "
    jorel_debug "ROOTDIR = $ROOTDIR"
    jorel_debug "ERL_LIBS = $ERL_LIBS"
    jorel_debug "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
    jorel_debug "BOOT_FILE = $BOOT_FILE"
    $BINDIR/$PROGNAME $FOREGROUNDOPTIONS $EXTRA_ARGS -pa $APP_DEPS -config $COMPILED_SYS_CONFIG -boot $1
  fi
}

start_app() {
  mkdir -p $PIPE_DIR
  mkdir -p $LOG_DIR
  $BINDIR/run_erl -daemon $PIPE_DIR $LOG_DIR "exec $SCRIPT_DIR/$NAME console"
}

exec_command() {
  MODULE="$1"; shift
  FUNCTION="$1"; shift
  ARGS="$@"
  jorel_debug "Execute command $MODULE:$FUNCTION($ARGS)"
  compile_config
  EXTRA_ARGS=""
  if [ -f $VM_ARGS ] ; then
    EXTRA=$(cat $VM_ARGS | grep -v "^\s*#" | sed -e 's/#.*//' | xargs)
    EXTRA_ARGS=$(eval echo $EXTRA)
  fi
  export ERL_LIBS=$($BINDIR/escript $REL_DIR/extrel get_erl_libs $REL_FILE $LIBDIR)
  export ROOTDIR="$ROOT_DIR"
  export EMU="beam"
  export PROGNAME="erlexec"
  export LD_LIBRARY_PATH="$ERTS_DIR/lib:$LD_LIBRARY_PATH"
  jorel_debug "Start "
  jorel_debug "ROOTDIR = $ROOTDIR"
  jorel_debug "ERL_LIBS = $ERL_LIBS"
  jorel_debug "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
  jorel_debug "BOOT_FILE = $CLEAN_BOOT_FILE"
  $BINDIR/$PROGNAME $EXTRA_ARGS -pa $APP_DEPS -config $COMPILED_SYS_CONFIG -noshell -boot $CLEAN_BOOT_FILE -s "$MODULE" "$FUNCTION" -extra $ARGS
  exit "$?"
}

attach_app() {
  if [ $STARTED = true ] ; then
    exec $BINDIR/to_erl $PIPE_DIR
  else
    echo "$NAME is not started"
  fi
}

stop_app() {
  if [ $STARTED = true ] ; then
    if ! jorel_nodetool "stop" >/dev/null ; then
      exit 1
    fi
    while $(kill -s 0 "$PID" 2>/dev/null); do
      sleep 1
    done
  else
    echo "$NAME is not started"
  fi
}

execute() {
  if [ $# = 0 ] ; then
    help "Missing module" ; exit 0
  fi
  MODULE=$1 ; shift
  if [ $# = 0 ] ; then
    help "Missing function" ; exit 0
  fi
  FUNCTION=$1 ; shift
  echo $@
  if output="$(jorel_nodetool rpcterms $MODULE $FUNCTION $@)"
  then
    echo "$output" | sed -e 's/"//g'
    return 0
  else
    echo "$output"
    return 1
  fi
}

help() {
  MESSAGE=$1
  if [ "x$MESSAGE" != "x" ] ; then
    echo $MESSAGE
  fi
  echo "Usage : $NAME [options] {start|stop|restart|restart-hard|reboot|console|attach|status|info|pid|ping|exec|command|upgrade|downgrade|install|unpack}"
  echo ""
  echo "Options :"
  echo "  -h --help        : Display this message"
  echo ""
  echo "Commands:"
  echo "  start            : Start the application"
  echo "  stop             : Stop the application"
  echo "  foreground       : Run in foreground"
  echo "  restart          : Restart the application"
  echo "  restart-hard     : Stop and start the application"
  echo "  reboot           : Reboot the application"
  echo "  console          : Start the application in a console"
  echo "  console_clean    : Open a console on clean boot"
  echo "  attach           : Attach a console to the running application"
  echo "  status           : Return the application status"
  echo "  info             : Return the application informations"
  echo "  pid              : Return the application PID"
  echo "  ping             : Ping the application"
  echo "  exec             : Execute a command on a started application"
  echo "  command          : Execute a command on a non started application"
  echo "  upgrade          : Upgrade the application"
  echo "  downgrade        : Downgrade the application"
  echo "  install          : Install a new version of the application"
  echo "  unpack           : Unpack a version"
}

FOREGROUNDOPTIONS=
if [ "$#" = "0" ] ; then
  help
fi
case $1 in
  console)
    run_app $BOOT_FILE ;;
  console_clean)
    run_app $CLEAN_BOOT_FILE ;;
  console_boot)
    if [ "$#" = "1" ] ; then
      help
      exit 1
    fi
    shift
    run_app "$1" ;;
  foreground)
    FOREGROUNDOPTIONS="-noshell -noinput +Bd"
    run_app $BOOT_FILE ;;
  start)
    start_app ;;
  attach)
    attach_app ;;
  stop)
    stop_app ;;
  restart)
    if ! jorel_nodetool "restart" >/dev/null; then
      exit 1
    fi
    ;;
  restart-hard)
    stop_app ; sleep 2 ; start_app ;;
  reboot)
    if ! jorel_nodetool "reboot" >/dev/null; then
      exit 1
    fi
    ;;
  status)
    print_status ;;
  info)
    print_info ;;
  pid)
    if [ "$PID" = "" ] ; then
      exit 1
    else
      echo $PID
    fi
    ;;
  ping)
    if ! jorel_nodetool "ping"; then
      exit 1
    fi
    ;;
  exec)
    shift ; execute "$@" ; exit 0 ;;
  upgrade|downgrade|install)
    if [ -z "$2" ]; then
      echo "Missing package argument"
      echo "Usage: $NAME $1 {version}"
      exit 1
    fi
    # Make sure a node IS running
    if ! jorel_nodetool "ping" > /dev/null; then
      echo "$NAME is not running!"
      exit 1
    fi
    exec "$BINDIR/escript" "$ROOT_DIR/bin/upgrade.escript" \
      "install" "$REL_NAME" "$NODE_NAME" "$NODE_COOKIE" "$2"
    ;;
  unpack)
    if [ -z "$2" ]; then
      echo "Missing package argument"
      echo "Usage: $NAME $1 {version}"
      exit 1
    fi
    # Make sure a node IS running
    if ! jorel_nodetool "ping" > /dev/null; then
      echo "Node is not running!"
      exit 1
    fi
    exec "$BINDIR/escript" "$ROOT_DIR/bin/upgrade.escript" \
      "unpack" "$REL_NAME" "$NODE_NAME" "$NODE_COOKIE" "$2"
    ;;
  command)
    shift
    exec_command $@
    exit "$?"
    ;;
  -h|--help)
    help ; exit 0 ;;
  *)
    help "Invalid option $1" ; exit 1 ;;
esac

exit 0

